// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TPIntegradorProgIII.DBContexts;

#nullable disable

namespace TPIntegradorProgIII.Migrations
{
    [DbContext(typeof(TPContext))]
    partial class TPContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.9");

            modelBuilder.Entity("TPIntegradorProgIII.Entities.Meet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("MeetDate")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("MeetName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("MeetPlace")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Meets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MeetDate = "20-12-2022",
                            MeetName = "Primer Meet",
                            MeetPlace = "Rosario"
                        },
                        new
                        {
                            Id = 2,
                            MeetDate = "25-12-2022",
                            MeetName = "Segundo Meet",
                            MeetPlace = "Buenos Aires"
                        });
                });

            modelBuilder.Entity("TPIntegradorProgIII.Entities.Swimmer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AttendedTrial")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("DNI")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TrialId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TrialId");

                    b.ToTable("Swimmers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AttendedTrial = "Croll 100 metros (Primer Meet)",
                            DNI = 44555666,
                            Email = "manuel@gmail.com",
                            Name = "Manuel",
                            Password = "2757cb3cafc39af451abb2697be79b4ab61d63d74d85b0418629de8c26811b529f3f3780d0150063ff55a2beee74c4ec102a2a2731a1f1f7f10d473ad18a6a87",
                            Surname = "Ibarbia",
                            TrialId = 1,
                            UserName = "string"
                        },
                        new
                        {
                            Id = 2,
                            AttendedTrial = "Croll 100 metros (Primer Meet)",
                            DNI = 33444555,
                            Email = "luciano@gmail.com",
                            Name = "Luciano",
                            Password = "ba3253876aed6bc22d4a6ff53d8406c6ad864195ed144ab5c87621b6c233b548baeae6956df346ec8c17f5ea10f35ee3cbc514797ed7ddd3145464e2a0bab413",
                            Surname = "Solari",
                            TrialId = 1,
                            UserName = "lucianoS"
                        },
                        new
                        {
                            Id = 3,
                            AttendedTrial = "Espalda 150 metros (Segundo Meet)",
                            DNI = 55666777,
                            Email = "santiago@gmail.com",
                            Name = "Santiago",
                            Password = "ba3253876aed6bc22d4a6ff53d8406c6ad864195ed144ab5c87621b6c233b548baeae6956df346ec8c17f5ea10f35ee3cbc514797ed7ddd3145464e2a0bab413",
                            Surname = "Caso",
                            TrialId = 2,
                            UserName = "santiagoC"
                        });
                });

            modelBuilder.Entity("TPIntegradorProgIII.Entities.Trial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Distance")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MeetId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MeetName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Style")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MeetId");

                    b.ToTable("Trials");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Distance = 100,
                            MeetId = 1,
                            MeetName = "Primer Meet",
                            Style = "Croll"
                        },
                        new
                        {
                            Id = 2,
                            Distance = 150,
                            MeetId = 2,
                            MeetName = "Segundo Meet",
                            Style = "Espalda"
                        });
                });

            modelBuilder.Entity("TPIntegradorProgIII.Entities.Swimmer", b =>
                {
                    b.HasOne("TPIntegradorProgIII.Entities.Trial", "Trial")
                        .WithMany("RegisteredSwimmers")
                        .HasForeignKey("TrialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Trial");
                });

            modelBuilder.Entity("TPIntegradorProgIII.Entities.Trial", b =>
                {
                    b.HasOne("TPIntegradorProgIII.Entities.Meet", "Meet")
                        .WithMany("Trials")
                        .HasForeignKey("MeetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meet");
                });

            modelBuilder.Entity("TPIntegradorProgIII.Entities.Meet", b =>
                {
                    b.Navigation("Trials");
                });

            modelBuilder.Entity("TPIntegradorProgIII.Entities.Trial", b =>
                {
                    b.Navigation("RegisteredSwimmers");
                });
#pragma warning restore 612, 618
        }
    }
}
